# -*- coding: utf-8 -*-

#-------------------------------------------------------------------------------
# Copyright (c) 2015 Artur Eganyan
#
# This work is provided "AS IS", WITHOUT ANY WARRANTY, express or implied.
#-------------------------------------------------------------------------------

# Условия: if, elif, else

x = 5

if x > 10:
    print 1
elif x >= 5:
    print 2
else:
    print 3


# Циклы: for <элемент> in <контейнер>, while <условие>. Оба цикла могут иметь 
# ветку else - она выполняется, если цикл завершился нормально, т.е. без break, 
# return или исключения.
#
# Поскольку for ... in перебирает элементы контейнера, для прохода по диапазону 
# чисел используются функции range() и xrange(). range() возвращает список 
# чисел. xrange() возвращает объект xrange, который ведет себя как список чисел, 
# но создает числа по факту обращения к ним, не занимая много памяти.
#
# Замечание: Пишут, что по скорости range() и xrange() почти не отличаются,
# только по памяти. Но при многократном проходе по одному и тому же списку
# чисел range() может быть лучше, т.к. он не создает числа каждый раз заново.

a = [1, 2, 3, 4, 5]

for e in a:
    if e == 2:
        continue
    if e > 10:
        break
    print e
else:
    print u"for завершился без break/return/exception"

for i in range(5):
    print i         # 0 1 2 3 4

for i in range(1, 10, 2):
    print i         # 1 3 5 7 9

i = 1

while i <= 5:
    print i
    i += 1
else:
    print u"while завершился без break/return/exception"


# Замечание: В python 3.x range() ведет себя как xrange(), а xrange() просто нет.
#
# Замечание: В стандартной реализации python xrange() может работать только с 
# количеством элементов, помещающимся в тип long языка C.
#
# Замечание: На stackoverflow пишут, что for i in range(N) примерно в два раза 
# быстрее, чем while i < N: i += 1. В качестве объяснения приводят декомпилированный 
# код, в котором для цикла while получается 10 python-инструкций, а для 
# for i in range - всего 3, одна из которых предназначена для перебора элементов. 
# Поэтому для for основная часть кода выполняется на C, а для while - на python.
